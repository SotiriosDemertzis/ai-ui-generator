/**
 * @file backend/routes/export.js
 * @description This file defines the routes for exporting and converting UI components.
 * It provides functionality to download a full session as a ZIP archive, including all generated components, a sample React application, and necessary configuration files.
 * It also includes a route to convert a single JSX component into a standalone HTML file with embedded CSS, which is useful for quick previews and sharing.
 * The ZIP export functionality uses the `archiver` library to create the archive on the fly.
 */
const express = require('express');
const archiver = require('archiver');
const fs = require('fs');
const path = require('path');
const pool = require('../database/database');
const verifyToken = require('../middleware/auth');

const router = express.Router();

// Export session as ZIP
router.get('/session/:id/download', verifyToken, async (req, res) => {
  try {
    const { id } = req.params;
    console.log('🔍 ZIP Export - Session ID:', id, 'User ID:', req.user.userId);

    // Get session and prompts
    const session = await pool.query(
      'SELECT * FROM sessions WHERE id = $1 AND user_id = $2',
      [id, req.user.userId]
    );

    console.log('📊 ZIP Export - Session found:', session.rows);

    if (session.rows.length === 0) {
      console.log('❌ ZIP Export - Session not found');
      return res.status(404).json({ message: 'Session not found' });
    }

    const prompts = await pool.query(
      'SELECT * FROM prompts WHERE session_id = $1 ORDER BY created_at ASC',
      [id]
    );

    console.log('📋 ZIP Export - Prompts found:', prompts.rows.length, 'prompts');
    console.log('📋 ZIP Export - Prompts data:', prompts.rows.map(p => ({
      id: p.id,
      user_prompt: p.user_prompt?.substring(0, 50) + '...', 
      jsx_code: p.jsx_code?.substring(0, 100) + '...' 
    })));

    // Create archive
    const archive = archiver('zip', { zlib: { level: 9 } });
    
    res.attachment(`${session.rows[0].title}-components.zip`);
    archive.pipe(res);

    // Add each component as a separate file
    if (prompts.rows.length === 0) {
      console.log('⚠️ ZIP Export - No prompts found, creating sample component');
      // Create a sample component if no prompts exist
      const sampleComponent = `// Generated by AI UI Generator
// Sample Component - No prompts found in session

import React from 'react';
import { 
  LogOut, Send, Copy, Download, Palette, Plus, 
  Trash2, Edit3, Save, X, FolderOpen, Code, Globe,
  User, Mail, Lock, Eye, EyeOff, Heart, Star, Bell,
  ArrowDown, ArrowRight, ChevronDown, ChevronRight, Check, CheckCircle,
  Home, Settings, Menu, Search, Filter, Calendar
} from 'lucide-react';

const SampleComponent = () => {
  return (
    <div className="p-8 bg-blue-500 text-white rounded-lg text-center">
      <h1 className="text-2xl font-bold mb-4">Sample Component</h1>
      <p className="mb-4">This session contained no saved prompts.</p>
      <button className="bg-white text-blue-500 px-4 py-2 rounded hover:bg-gray-100">
        Sample Button
      </button>
    </div>
  );
};

export default SampleComponent;
`;
      archive.append(sampleComponent, { name: 'src/components/SampleComponent.jsx' });
    }

    prompts.rows.forEach((prompt, index) => {
      const componentName = `Component${index + 1}.jsx`;
      
      // Clean JSX code for better component structure
      const cleanJSXForExport = (jsxCode) => {
        let cleaned = jsxCode;
        
        // Remove markdown code blocks
        cleaned = cleaned.replace(/```jsx?\n?/g, '').replace(/```\n?/g, '');
        
        // If it contains a function component, extract the return JSX
        if (cleaned.includes('const ') && cleaned.includes('return')) {
          const functionMatch = cleaned.match(/const\s+\w+\s*=\s*\([^)]*\)\s*=>\s*\{[\s\S]*?return\s*\(\s*([\s\S]*?)\s*\)\s*;?\s*\}/);
          if (functionMatch) {
            cleaned = functionMatch[1].trim();
          } else {
            const regularFunctionMatch = cleaned.match(/function\s+\w+\([^)]*\)\s*\{[\s\S]*?return\s*\(\s*([\s\S]*?)\s*\)\s*;?\s*\}/);
            if (regularFunctionMatch) {
              cleaned = regularFunctionMatch[1].trim();
            } else {
              const simpleReturn = cleaned.match(/return\s*\(\s*([\s\S]*?)\s*\)\s*;?\s*}?\s*$/);
              if (simpleReturn) {
                cleaned = simpleReturn[1].trim();
              }
            }
          }
        }
        
        // Remove any remaining function wrapper, exports, and explanatory text
        cleaned = cleaned.replace(/^[\s\S]*?(<[^>]*>[\s\S]*)$/m, '$1');
        cleaned = cleaned.replace(/export\s+default\s+\w+;?\s*$/g, '');
        cleaned = cleaned.replace(/}\s*;?\s*$/g, '');
        
        // Remove trailing ); }; and any explanatory text after the JSX
        cleaned = cleaned.replace(/\s*\)\s*;\s*}\s*;?\s*[\s\S]*$/, '');
        
        // Remove any text after the closing tag of the main JSX element
        const lastClosingTag = cleaned.lastIndexOf('</');
        if (lastClosingTag !== -1) {
          const afterLastTag = cleaned.substring(lastClosingTag);
          const tagEnd = afterLastTag.indexOf('>');
          if (tagEnd !== -1) {
            cleaned = cleaned.substring(0, lastClosingTag + tagEnd + 1);
          }
        }
        
        return cleaned.trim();
      };
      
      const cleanedJSX = cleanJSXForExport(prompt.jsx_code);
      
      const componentContent = `// Generated by AI UI Generator
// Prompt: ${prompt.user_prompt}
// Created: ${prompt.created_at}

import React from 'react';
import { 
  LogOut, Send, Copy, Download, Palette, Plus, 
  Trash2, Edit3, Save, X, FolderOpen, Code, Globe,
  User, Mail, Lock, Eye, EyeOff, Heart, Star, Bell,
  ArrowDown, ArrowRight, ChevronDown, ChevronRight, Check, CheckCircle,
  Home, Settings, Menu, Search, Filter, Calendar
} from 'lucide-react';

const Component${index + 1} = () => {
  return (
    ${cleanedJSX}
  );
};

export default Component${index + 1};
`;
      archive.append(componentContent, { name: `src/components/${componentName}` });
    });

    // Add main App.js file that imports all components
    const hasPrompts = prompts.rows.length > 0;
    const appContent = `import React from 'react';
import ReactDOM from 'react-dom/client';
${hasPrompts 
  ? prompts.rows.map((_, index) => `import Component${index + 1} from './components/Component${index + 1}';`).join('\n')
  : 'import SampleComponent from \'./components/SampleComponent\';'
}
import './index.css';

function App() {
  return (
    <div className="min-h-screen bg-gray-50 p-8">
      <div className="max-w-6xl mx-auto">
        <h1 className="text-3xl font-bold text-gray-900 mb-8 text-center">
          ${session.rows[0].title}
        </h1>
        <div className="space-y-12">
${hasPrompts 
  ? prompts.rows.map((prompt, index) => `          <div className="bg-white rounded-lg shadow-lg p-6">
            <h2 className="text-xl font-semibold text-gray-800 mb-4">
              Component ${index + 1}
            </h2>
            <p className="text-gray-600 mb-4 text-sm">
              Prompt: "${prompt.user_prompt}"
            </p>
            <div className="border border-gray-200 rounded-lg p-4">
              <Component${index + 1} />
            </div>
          </div>`).join('\n')
  : `          <div className="bg-white rounded-lg shadow-lg p-6">
            <h2 className="text-xl font-semibold text-gray-800 mb-4">
              Sample Component
            </h2>
            <p className="text-gray-600 mb-4 text-sm">
              This session had no saved prompts, so here's a sample component.
            </p>
            <div className="border border-gray-200 rounded-lg p-4">
              <SampleComponent />
            </div>
          </div>`
}
        </div>
      </div>
    </div>
  );
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);

export default App;
`;

    archive.append(appContent, { name: 'src/App.js' });

    // Add index.css with Tailwind
    const indexCss = `@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  body {
    margin: 0;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
      sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }
}

@layer components {
  .line-clamp-1 {
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 1;
  }
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}
`;

    archive.append(indexCss, { name: 'src/index.css' });

    // Add main.jsx for Vite
    const mainJsx = `import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App.js';
import './index.css';

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
);
`;

    archive.append(mainJsx, { name: 'src/main.jsx' });

    // Add public/index.html
    const publicHtml = `<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta name="description" content="AI Generated UI Components" />
    <title>${session.rows[0].title}</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>
`;

    archive.append(publicHtml, { name: 'public/index.html' });

    // Add package.json for the project
    const packageJson = {
      name: session.rows[0].title.toLowerCase().replace(/\s+/g, '-'),
      version: '1.0.0',
      type: 'module',
      dependencies: {
        react: '^18.2.0',
        'react-dom': '^18.2.0',
        'lucide-react': '^0.292.0'
      },
      devDependencies: {
        '@vitejs/plugin-react': '^4.0.3',
        vite: '^4.4.5',
        tailwindcss: '^3.3.0',
        autoprefixer: '^10.4.14',
        postcss: '^8.4.27'
      },
      scripts: {
        dev: 'vite',
        build: 'vite build',
        preview: 'vite preview'
      }
    };

    archive.append(JSON.stringify(packageJson, null, 2), { name: 'package.json' });

    // Add Vite config
    const viteConfig = `import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  server: {
    port: 3000,
    open: true
  }
})
`;

    archive.append(viteConfig, { name: 'vite.config.js' });

    // Add Tailwind config
    const tailwindConfig = `/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
`;

    archive.append(tailwindConfig, { name: 'tailwind.config.js' });

    // Add PostCSS config
    const postcssConfig = `export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
`;

    archive.append(postcssConfig, { name: 'postcss.config.js' });

    // Add README
    const readme = `# ${session.rows[0].title}

Generated by AI UI Generator

## 📋 Components

${prompts.rows.map((prompt, index) => 
  `### Component ${index + 1}
**Prompt:** "${prompt.user_prompt}"  
**Created:** ${new Date(prompt.created_at).toLocaleDateString()}  
**File:** Component${index + 1}.jsx`
).join('\n\n')}

## 🚀 Getting Started

### Prerequisites
- Node.js (v16 or higher)
- npm or yarn

### Installation

1. **Install dependencies:**
   

2. **Start the development server:**
   

3. **Open your browser:**
   The app will automatically open at 

### Build for Production


## 📁 Project Structure


## 🎨 Styling

This project uses:
- **Tailwind CSS** for utility-first styling
- **Lucide React** for icons
- **Vite** for fast development and building

## 📝 Usage

Each component is displayed in a separate section on the main page. You can:
- View all components at once
- See the original prompts that generated each component
- Modify components in 
- Customize the layout in 

## 🛠️ Technologies Used

- React 18
- Vite
- Tailwind CSS
- Lucide React (for icons)
- PostCSS & Autoprefixer

---

*This project was generated using AI UI Generator - Transform your ideas into beautiful, functional UI components using the power of AI.*
`;

    archive.append(readme, { name: 'README.md' });

    console.log('✅ ZIP Export - Archive contents added successfully');
    console.log('📦 ZIP Export - Components:', hasPrompts ? prompts.rows.length : 1, '(including sample if needed)');
    
    archive.finalize();

    console.log('🎉 ZIP Export - Archive finalized and sent to client');

  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Export failed' });
  }
});

// Convert JSX to HTML/CSS
router.post('/convert-to-html', verifyToken, async (req, res) => {
  try {
    const { jsxCode, title } = req.body;

    // Enhanced JSX to HTML conversion
    const convertJSXToHTML = (jsx) => {
      let html = jsx;
      
      // Remove React imports and function wrappers if present
      html = html.replace(/import.*?from.*?['"].*?['"].*?\s*/g, '');
      html = html.replace(/const\s+\w+\s*=\s*\([^)]*\)\s*=>\s*\{[^}]*return\s*\(/g, '');
      html = html.replace(/function\s+\w+\([^)]*\)\s*\{[^}]*return\s*\(/g, '');
      html = html.replace(/^\s*return\s*\(/g, '');
      html = html.replace(/\);\s*\};\s*export\s+default\s+\w+;?\s*$/g, '');
      html = html.replace(/\);\s*\}\s*$/g, '');
      
      // Convert JSX attributes to HTML
      html = html.replace(/className=/g, 'class=');
      html = html.replace(/htmlFor=/g, 'for=');
      
      // Handle JSX expressions in attributes - convert simple ones
      html = html.replace(/\{\s*(['"])(.*?)\1\s*\}/g, '$1$2$1');
      
      // Remove event handlers and complex JSX expressions
      html = html.replace(/\s*(onClick|onChange|onSubmit|onFocus|onBlur|onMouseEnter|onMouseLeave)\s*=\s*\{[^}]*\}/g, '');
      
      // Handle remaining simple JSX expressions
      html = html.replace(/\{\s*(\w+)\s*\}/g, '$1');
      
      // Clean up any remaining curly braces that don't contain complex expressions
      html = html.replace(/\{\s*\}/g, '');
      
      // Handle self-closing tags properly
      html = html.replace(/(<\w+[^>]*)\s*\/>/g, '$1>');
      
      // Remove any remaining JSX artifacts
      html = html.replace(/\s+/g, ' ').trim();
      
      return html;
    };

    const convertedHTML = convertJSXToHTML(jsxCode);

    const htmlContent = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${title || 'AI Generated Component'}</title>
    <style>
        /* Embedded Tailwind CSS - Core utilities for common classes */
        *, ::before, ::after { box-sizing: border-box; border-width: 0; border-style: solid; border-color: #e5e7eb; }
        ::before, ::after { --tw-content: ''; }
        
        body { margin: 0; line-height: inherit; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', sans-serif; padding: 20px; background-color: #f8fafc; }
        
        #root { max-width: 1200px; margin: 0 auto; }
        
        /* Common Tailwind utilities */
        .p-4 { padding: 1rem; } .p-8 { padding: 2rem; } .px-4 { padding-left: 1rem; padding-right: 1rem; } .py-2 { padding-top: 0.5rem; padding-bottom: 0.5rem; }
        .m-4 { margin: 1rem; } .mb-4 { margin-bottom: 1rem; } .mt-4 { margin-top: 1rem; } .mx-auto { margin-left: auto; margin-right: auto; }
        .text-center { text-align: center; } .text-left { text-align: left; } .text-right { text-align: right; }
        .text-xs { font-size: 0.75rem; line-height: 1rem; } .text-sm { font-size: 0.875rem; line-height: 1.25rem; } .text-base { font-size: 1rem; line-height: 1.5rem; }
        .text-lg { font-size: 1.125rem; line-height: 1.75rem; } .text-xl { font-size: 1.25rem; line-height: 1.75rem; } .text-2xl { font-size: 1.5rem; line-height: 2rem; }
        .text-3xl { font-size: 1.875rem; line-height: 2.25rem; } .text-4xl { font-size: 2.25rem; line-height: 2.5rem; }
        .font-thin { font-weight: 100; } .font-light { font-weight: 300; } .font-normal { font-weight: 400; } .font-medium { font-weight: 500; }
        .font-semibold { font-weight: 600; } .font-bold { font-weight: 700; } .font-extrabold { font-weight: 800; } .font-black { font-weight: 900; }
        .text-black { color: rgb(0 0 0); } .text-white { color: rgb(255 255 255); } .text-gray-50 { color: rgb(249 250 251); } .text-gray-100 { color: rgb(243 244 246); }
        .text-gray-200 { color: rgb(229 231 235); } .text-gray-300 { color: rgb(209 213 219); } .text-gray-400 { color: rgb(156 163 175); } .text-gray-500 { color: rgb(107 114 128); }
        .text-gray-600 { color: rgb(75 85 99); } .text-gray-700 { color: rgb(55 65 81); } .text-gray-800 { color: rgb(31 41 55); } .text-gray-900 { color: rgb(17 24 39); }
        .text-red-500 { color: rgb(239 68 68); } .text-red-600 { color: rgb(220 38 38); } .text-green-500 { color: rgb(34 197 94); } .text-green-600 { color: rgb(22 163 74); }
        .text-blue-500 { color: rgb(59 130 246); } .text-blue-600 { color: rgb(37 99 235); } .text-purple-500 { color: rgb(168 85 247); } .text-purple-600 { color: rgb(147 51 234); }
        .bg-white { background-color: rgb(255 255 255); } .bg-black { background-color: rgb(0 0 0); } .bg-gray-50 { background-color: rgb(249 250 251); }
        .bg-gray-100 { background-color: rgb(243 244 246); } .bg-gray-200 { background-color: rgb(229 231 235); } .bg-gray-300 { background-color: rgb(209 213 219); }
        .bg-gray-500 { background-color: rgb(107 114 128); } .bg-gray-800 { background-color: rgb(31 41 55); } .bg-gray-900 { background-color: rgb(17 24 39); }
        .bg-red-500 { background-color: rgb(239 68 68); } .bg-red-600 { background-color: rgb(220 38 38); } .bg-green-500 { background-color: rgb(34 197 94); }
        .bg-blue-500 { background-color: rgb(59 130 246); } .bg-blue-600 { background-color: rgb(37 99 235); } .bg-purple-500 { background-color: rgb(168 85 247); }
        .bg-yellow-500 { background-color: rgb(234 179 8); } .bg-pink-500 { background-color: rgb(236 72 153); } .bg-indigo-500 { background-color: rgb(99 102 241); }
        .border { border-width: 1px; } .border-2 { border-width: 2px; } .border-gray-200 { border-color: rgb(229 231 235); } .border-gray-300 { border-color: rgb(209 213 219); }
        .rounded { border-radius: 0.25rem; } .rounded-md { border-radius: 0.375rem; } .rounded-lg { border-radius: 0.5rem; } .rounded-xl { border-radius: 0.75rem; }
        .rounded-full { border-radius: 9999px; } .shadow { box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1); }
        .shadow-md { box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1); }
        .shadow-lg { box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1); }
        .flex { display: flex; } .inline-flex { display: inline-flex; } .block { display: block; } .inline-block { display: inline-block; } .hidden { display: none; }
        .items-center { align-items: center; } .items-start { align-items: flex-start; } .items-end { align-items: flex-end; }
        .justify-center { justify-content: center; } .justify-between { justify-content: space-between; } .justify-around { justify-content: space-around; }
        .flex-col { flex-direction: column; } .flex-row { flex-direction: row; } .flex-wrap { flex-wrap: wrap; }
        .w-full { width: 100%; } .w-1/2 { width: 50%; } .w-1/3 { width: 33.333333%; } .w-2/3 { width: 66.666667%; } .w-1/4 { width: 25%; } .w-3/4 { width: 75%; }
        .h-full { height: 100%; } .h-screen { height: 100vh; } .h-auto { height: auto; } .min-h-screen { min-height: 100vh; }
        .space-x-2 > :not([hidden]) ~ :not([hidden]) { margin-left: 0.5rem; } .space-x-4 > :not([hidden]) ~ :not([hidden]) { margin-left: 1rem; }
        .space-y-2 > :not([hidden]) ~ :not([hidden]) { margin-top: 0.5rem; } .space-y-4 > :not([hidden]) ~ :not([hidden]) { margin-top: 1rem; }
        .cursor-pointer { cursor: pointer; } .select-none { user-select: none; } .transition { transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter; transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); transition-duration: 150ms; }
        .hover\:bg-gray-100:hover { background-color: rgb(243 244 246); } .hover\:bg-blue-600:hover { background-color: rgb(37 99 235); }
        .hover\:text-white:hover { color: rgb(255 255 255); } .focus\:outline-none:focus { outline: 2px solid transparent; outline-offset: 2px; }
        .grid { display: grid; } .grid-cols-1 { grid-template-columns: repeat(1, minmax(0, 1fr)); } .grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }
        .gap-4 { gap: 1rem; } .gap-2 { gap: 0.5rem; } .max-w-md { max-width: 28rem; } .max-w-lg { max-width: 32rem; } .max-w-xl { max-width: 36rem; }
        .opacity-50 { opacity: 0.5; } .opacity-75 { opacity: 0.75; } .opacity-100 { opacity: 1; }
        
        /* Custom button styles */
        button {
            cursor: pointer;
            transition: all 0.2s ease-in-out;
            border: none;
            outline: none;
        }
        button:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }
        button:active {
            transform: translateY(0);
        }
        button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }
        
        /* Responsive design */
        @media (max-width: 768px) {
            body { padding: 10px; }
            .text-4xl { font-size: 2rem; line-height: 2.25rem; }
            .text-3xl { font-size: 1.5rem; line-height: 2rem; }
            .p-8 { padding: 1rem; }
        }
    </style>
</head>
<body>
    <div id="root">
        ${convertedHTML}
    </div>
    
    <script>
        // Basic interactivity placeholder - replace button clicks with alerts
        document.addEventListener('DOMContentLoaded', function() {
            const buttons = document.querySelectorAll('button');
            buttons.forEach(button => {
                button.addEventListener('click', function() {
                    alert('Button clicked: ' + (this.textContent || 'Button'));
                });
            });
            
            // Add some basic form handling
            const forms = document.querySelectorAll('form');
            forms.forEach(form => {
                form.addEventListener('submit', function(e) {
                    e.preventDefault();
                    alert('Form submitted successfully!');
                });
            });
        });
    </script>
</body>
</html>`;

    res.json({
      success: true,
      htmlContent,
      filename: `${title || 'component'}.html`
    });

  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Conversion failed' });
  }
});

module.exports = router;
